<?xml version='1.0' encoding='UTF-8' ?> 

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
There has to be one entity for each item to be referenced. 
An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC5966 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5966.xml">
<!ENTITY I-D.ietf-tcpm-fastopen SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tcpm-fastopen">
<!ENTITY I-D.draft-ietf-dnsop-edns-tcp-keepalive SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-dnsop-edns-tcp-keepalive-00.xml">
<!ENTITY RFC0768 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC0793 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0793.xml">
<!ENTITY RFC1034 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC1123 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1123.xml">
<!ENTITY RFC2119 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2119 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2629 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC2671 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2671.xml">
<!ENTITY RFC2920 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2920.xml">
<!ENTITY RFC3552 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4033 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5011 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5011.xml">
<!ENTITY RFC5155 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5155.xml">
<!ENTITY RFC5358 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5358.xml">
<!ENTITY RFC5625 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5625.xml">
<!ENTITY RFC5625 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5625.xml">
<!ENTITY RFC6824 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6824.xml">
<!ENTITY RFC6891 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7230 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY RFC7323 PUBLIC '' "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7323.xml">
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std" docName="draft-edns-key-tag" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
  ipr values: full3667, noModification3667, noDerivatives3667
  you can add the attributes updates="NNNN" and obsoletes="NNNN" 
  they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
    full title is longer than 39 characters -->

    <title abbrev="EDNS Key Tag Option">The EDNS Key Tag Option</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Duane Wessels" initials="D." surname="Wessels">
      <organization>Verisign Labs</organization>
      <address>
        <postal>
          <street>12061 Bluemont Way</street>
          <city>Reston</city>
          <region>VA</region>
          <code>20190</code>
        </postal>
        <phone>+1 703 948-3200</phone>
        <email>dwessels@verisign.com</email>
        <uri>http://verisigninc.com</uri>
      </address>
    </author>

    <date month="April" year="2015" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
          in the current day for you. If only the current year is specified, xml2rfc will fill 
    in the current day and month for you. If the year is not the current one, it is 
    necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
    purpose of calculating the expiry date).  With drafts it is normally sufficient to 
    specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
    IETF is fine for individual submissions.  
    If this element is not present, the default is "Network Working Group",
    which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>DNS</keyword>
    <keyword>TCP/IP</keyword>
    <keyword>transport</keyword>
    <!-- Keywords will be incorporated into HTML output
    files in a meta tag but they have no effect on text or nroff
    output. If you submit your draft to the RFC Editor, the
    keywords will be used for the search engine. -->

<!-- text liberally borrowed from RFC 6975 -->

    <abstract>
      <t>
	The DNS Security Extensions (DNSSEC) were developed to provide
	origin authentication and integrity protection for DNS data
	by using digital signatures.  These digital signatures can be
	verified by building a chain-of-trust starting from a trust
	anchor and proceeding down to a particular node in the DNS.
	This document specifies a way for validating end-system
	resolvers to signal to a server which keys are referenced in
	their chain-of-trust.  The extensions allow zone administrators
	to monitor the progress of rollovers in a DNSSEC-signed zone.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>
	The DNS Security Extensions (DNSSEC) <xref target="RFC4033"/>, 
	<xref target="RFC4034"/> and <xref target="RFC4035"/> were developed 
	to provide origin 
	authentication and integrity protection for DNS data by using digital 
	signatures.  DNSSEC uses key tags to efficiently match signatures to
	the keys from which they are generated.  The key tag is a 16-bit
	value computed from the RDATA portion of a DNSKEY RR using a formula
	not unlike a ones-complement checksum.  RRSIG RRs contain a Key Tag
	field whose value is equal to the key tag of the DNSKEY RR that validates
	the signature.
      </t>
      <t>
	Likewise, Delegation Signer (DS) RRs also contain a key tag field whose
	value is equal to the key tag of the DNSKEY RR to which it refers.
      </t>
      <t>
	This draft sets out to specify a way for validating end-system
	resolvers to tell a server in a DNS query which DNSSEC key(s) they
	would use to validate the expected response.  This is done using the
	new EDNS option specified below in <xref target="option-format"/> for use in the
	OPT meta-RR <xref target="RFC6891"/>.
	This new EDNS option code is OPTIONAL to implement and use.
      </t>
      <t>
	This proposed EDNS option serves to measure the 
	acceptance and use of new trust anchors and zone signing keys (ZSKs).
	This signaling option can be used by zone administrators as a gauge
	to measure the successful deployment of new keys.  This is of particular
	interest for the DNS root zone in the event of key and/or algorithm rollovers which
	relies on <xref target="RFC5011"/> to automatically update a validating end-system's
	trust anchor.
      </t>
      <t>
	This draft does not seek to introduce another process for rolling keys or updating
	trust anchors.  
	Rather, this document specifies a means by which a client 
	query can signal the set of keys that a client uses for DNSSEC validation.
      </t>
    </section>
    <section title="Terminology">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
          target="RFC2119"/>.
      </t>
    </section>


    <section title="Option Format" anchor="option-format">
      <t>The edns-key-tag option is encoded as follows:</t>
        <figure><artwork align="left"><![CDATA[
0                       8                      16
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                  OPTION-CODE                  |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                 OPTION-LENGTH                 |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    KEY-TAG                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      ...                      /
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
]]></artwork></figure>
        <t>where:

          <list style="hanging">
            <t hangText="OPTION-CODE: ">The EDNS0 option code
              assigned to edns-key-tag, [TBD].</t>

            <t hangText="OPTION-LENGTH: ">The value 2 x number of key-tag values present.</t>

            <t hangText="KEY-TAG: ">One or more 16-bit Key Tag values (<xref target="RFC4034"/>, Appendix B).</t>
          </list>
        </t>

    </section>

    <section title="Client Considerations">
      <t>
	A validating end-system resolver sets the edns-key-tag
	option in the OPT meta-RR when sending a
	query.  The validating end-system resolver MUST also set the DNSSEC
	OK bit <xref target="RFC4034"/> to indicate that it wishes to receive DNSSEC RRs in
	the response.
      </t>
      <t>
	[The KEY-TAG value(s) included in the edns-key-tag option represent the
	Key Tag of the DNSKEY that will be used to validate the expected response.]
	When the client sends a DNSKEY query, the edns-key-tag opton represents
	the key tag(s) of the KSK(s) of the zone for which the server is authoritative.
	A validating end-system resolver learns the key tag(s) of the KSK(s) from the zone's
	DS record(s) (found in the parent), or from a configured trust anchor.
      </t>
      <t>
	For non-DNSKEY queries, the edns-key-tag option represents the key tags of all
	DNSSEC keys in the zone's DNSKEY RRset.
      </t>
      <t>
	FOR DISCUSSION: In all likelihood, only the key tags of the KSKs are of interest.
	This document could specify that the edns-key-tag option be sent only with DNSKEY
	queries.
      </t>
      <t>
	Since the edns-key-tag option is only set in the query, if
	a client sees these options in the response, no action needs to be
	taken and the client MUST ignore the option values.
      </t>
      <section title="Stub Resolvers">
        <t>
	  Typically, stub resolvers rely on an upstream recursive server (or
	  cache) to provide a response.  So optimal setting of the edns-key-tag
	  option depends on whether the stub resolver elects to
	  perform its own validation.
	</t>
	<section title="Validating Stub Resolvers">
	  <t>
	    A validating stub resolver sets the DNSSEC OK (DO) bit <xref target="RFC4034"/> to
	    indicate that it wishes to receive additional DNSSEC RRs (i.e., RRSIG
	    RRs) in the response.  Such validating resolvers SHOULD include the
	    edns-key-tag option in the OPT RR when sending a
	    query.
	  </t>
	</section>
	<section title="Non-validating Stub Resolvers">
	  <t>
	    The edns-key-tag option MUST NOT be included by
	    non-validating stub resolvers.
	  </t>
	</section>
      </section>

      <section title="Recursive Resolvers">
	<t></t>

      	<section title="Validating Recursive Resolvers">
	  <t>
	    A validating recursive resolver sets the edns-key-tag
	    option when performing recursion based on relevant keys it knows
	    and any edns-key-tag values in the stub client query.
	    When the recursive server receives a query with the
	    option set, the recursive server MUST set the edns-key-tag list for any
	    outgoing iterative queries for that resolution chain to a union of
	    the stub client's key tags and the validating recursive resolver's key tags.
	    For example, if the recursive resolver's key tag list is (19036, 12345)
	    and the stub's algorithm list is (19036, 34567), the
	    final edns-key-tag list would be (19036, 12345, 34567).
	  </t>
	  <t>
	    If the client included the DO and Checking Disabled (CD) bits, but
	    did not include the edns-key-tag option in the query, the
	    validating recursive resolver MAY include the option with its own
	    key tag values in full.
	  </t>
	  <t>
	    Validating recursive resolvers MUST NOT set the edns-key-tag
	    option in the final response to the stub client.
	  </t>

	</section>

	<section title="Non-validating Recursive Resolvers">
	  <t>
	    Recursive resolvers that do not do validation MUST copy the edns-key-tag
	    option seen in received queries as they represent the
	    wishes of the validating downstream resolver that issued the original
	    query.
	  </t>

	</section>
      </section>
    </section>


    <section title="IANA Considerations">
      <t>The IANA is directed to assign an EDNS0 option code for
        the edns-key-tag option from the DNS EDNS0 Option Codes (OPT)
        registry as follows:</t>

      <texttable>
        <ttcol>Value</ttcol>
        <ttcol>Name</ttcol>
        <ttcol>Status</ttcol>
        <ttcol>Reference</ttcol>

        <c>[TBA]</c>
        <c>edns-key-tag</c>
        <c>Optional</c>
        <c>[This document]</c>
      </texttable>
    </section>


    <section title="Security Considerations" anchor="security">
      <t>
        This document specifies a way for a client to signal its trust anchor
        knowledge to a cache or server.  The signals
        are optional codes contained in the OPT meta-RR used with EDNS.  The
        goal of these options is to signal new trust anchor uptake in client
        code to allow zone administrators to know when it is possible to
        complete a key rollover in a DNSSEC-signed zone.
      </t>
      <t>
        There is a possibility that an eavesdropper or server could infer the
        validator in use by a client by the key tag list seen in queries. 
	This may allow an attacker to find validators using old, possibly broken, keys.
        It could also be used to identify the
        validator or narrow down the possible validator implementations in
        use by a client, which could have a known vulnerability that could be
        exploited by the attacker.
      </t>
    </section>

    <section title="Privacy Considerations" anchor="privacy">
      <t>
	
      </t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
      </t>
    </section>


  </middle>
  <back>

    <references title="Normative References">
    &RFC2119;
    &RFC1034;
    &RFC1035;
    &RFC4033;
    &RFC4034;
    &RFC4035;
    &RFC6891;
    </references>

    <references title="Informative References">
    &RFC5011;
    </references>

  </back>
</rfc>
